SHELL := /bin/bash
.PHONY: help check-deps install-deps setup-dev lint format test clean run

PYTHON_VERSION := 3.10

default: help

# ====================================================================================
# HELP
# ====================================================================================

help:
	@echo "üéØ Frank-Daemon - Ambiente de Desenvolvimento Local"
	@echo "========================================================================"
	@echo ""
	@echo "Comandos dispon√≠veis:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "üí° Quick start:"
	@echo "   1. make setup-dev"
	@echo "   2. make run"
	@echo ""

# ====================================================================================
# SETUP & DEPENDENCIES
# ====================================================================================

check-deps: ## Verifica se as depend√™ncias (pyenv, poetry) est√£o instaladas.
	@echo "üîç Verificando depend√™ncias..."
	@command -v pyenv >/dev/null 2>&1 || { echo "‚ùå pyenv n√£o encontrado. Execute 'make install-deps'"; exit 1; }
	@command -v poetry >/dev/null 2>&1 || { echo "‚ùå poetry n√£o encontrado. Execute 'make install-deps'"; exit 1; }
	@echo "‚úÖ Todas as depend√™ncias foram encontradas!"

install-deps: ## Mostra instru√ß√µes para instalar as ferramentas de desenvolvimento.
	@echo "üì¶ Instru√ß√µes de Instala√ß√£o:"
	@echo "--------------------------------------------------"
	@echo "1. Instale o pyenv (gerenciador de vers√£o do Python):"
	@echo "   curl https://pyenv.run | bash"
	@echo ""
	@echo "2. Instale o poetry (gerenciador de depend√™ncias):"
	@echo "   curl -sSL https://install.python-poetry.org | python3 -"
	@echo ""
	@echo "3. Ap√≥s a instala√ß√£o, configure seu shell (e.g., ~/.zshrc ou ~/.bashrc) e reinicie o terminal."

setup-dev: check-deps ## Configura o ambiente de desenvolvimento completo (Python, depend√™ncias).
	@echo "üêç Configurando ambiente Python com pyenv..."
	@if ! pyenv versions --bare | grep -q "^$(PYTHON_VERSION)$$"; then \
		echo "   Python $(PYTHON_VERSION) n√£o encontrado, instalando via pyenv (isso pode levar alguns minutos)..."; \
		pyenv install $(PYTHON_VERSION); \
	else \
		echo "   Python $(PYTHON_VERSION) j√° est√° dispon√≠vel."; \
	fi
	@pyenv local $(PYTHON_VERSION)
	@poetry config virtualenvs.in-project true
	@echo "üì¶ Instalando depend√™ncias do projeto com Poetry..."
	@poetry install
	@echo "üéâ Ambiente de desenvolvimento configurado com sucesso!"

# ====================================================================================
# DEVELOPMENT & CODE QUALITY
# ====================================================================================

run: ## Executa a aplica√ß√£o principal.
	@echo "‚ö° Executando Frank-Daemon..."
	@poetry run python src/main.py

lint: ## Executa os linters para verificar a qualidade do c√≥digo.
	@echo "üé® Verificando formata√ß√£o e qualidade do c√≥digo..."
	@poetry run flake8 src/ tests/
	@poetry run black --check src/ tests/
	@poetry run isort --check-only src/ tests/

format: ## Formata o c√≥digo usando black e isort.
	@echo "‚ú® Formatando o c√≥digo..."
	@poetry run black src/ tests/
	@poetry run isort src/ tests/

test: ## Executa os testes unit√°rios.
	@echo "üß™ Executando testes..."
	@poetry run pytest

# ====================================================================================
# CLEANING
# ====================================================================================

clean: ## Remove arquivos tempor√°rios e de build.
	@echo "üßπ Limpando arquivos tempor√°rios..."
	@find . -type d -name '__pycache__' -exec rm -rf {} +
	@find . -type f -name '*.py[co]' -delete
	@rm -f .coverage
	@rm -rf .pytest_cache .mypy_cache build/ dist/ *.egg-info/
	@if [ -d .venv ]; then rm -rf .venv; fi
	@echo "üßº Limpeza completa."
